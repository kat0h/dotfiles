repo = 'itchyny/lightline.vim'
hook_add = '''
if has('mac')
let g:lightline = {
        \ 'colorscheme': 'onedark',
        \ 'mode_map': {'c': 'NORMAL'},
        \ 'active': {
        \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ] ]
        \ },
        \ 'component_function': {
        \   'modified': 'LightlineModified',
        \   'readonly': 'LightlineReadonly',
        \   'fugitive': 'LightlineFugitive',
        \   'filename': 'LightlineFilename',
        \   'fileformat': 'LightlineFileformat',
        \   'filetype': 'LightlineFiletype',
        \   'fileencoding': 'LightlineFileencoding',
        \   'mode': 'LightlineMode'
        \ },
        \ 'separator': { 'left': '', 'right': '' },
        \ 'subseparator': { 'left': '', 'right': '' }
        \ }

else
let g:lightline = {
        \ 'colorscheme': 'onedark',
        \ 'mode_map': {'c': 'NORMAL'},
        \ 'active': {
        \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ] ]
        \ },
        \ 'component_function': {
        \   'modified': 'LightlineModified',
        \   'readonly': 'LightlineReadonly',
        \   'fugitive': 'LightlineFugitive',
        \   'filename': 'LightlineFilename',
        \   'fileformat': 'LightlineFileformat',
        \   'filetype': 'LightlineFiletype',
        \   'fileencoding': 'LightlineFileencoding',
        \   'mode': 'LightlineMode'
        \ }
        \ }

endif

function! LightlineModified()
  return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! LightlineReadonly()
  return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? 'x' : ''
endfunction

function! LightlineFilename()
  return ('' != LightlineReadonly() ? LightlineReadonly() . ' ' : '') .
        \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
        \  &ft == 'unite' ? unite#get_status_string() :
        \  &ft == 'vimshell' ? vimshell#get_status_string() :
        \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
        \ ('' != LightlineModified() ? ' ' . LightlineModified() : '')
endfunction

function! LightlineFugitive()
  if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
    return fugitive#head()
  else
    return ''
  endif
endfunction

function! LightlineFileformat()
  return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! LightlineFiletype()
  return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
endfunction

function! LightlineFileencoding()
  return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
endfunction

function! LightlineMode()
  return winwidth(0) > 60 ? lightline#mode() : ''
endfunction
'''

# 行頭行末にあるスペースを可視化
[[plugins]]
repo = 'bronson/vim-trailing-whitespace'

# gcでコメントの切り替えができる
[[plugins]]
repo = 'tpope/vim-commentary'
# . の強化
[[plugins]]
repo = 'tpope/vim-repeat'
# S で括弧の追加等ができる
[[plugins]]
repo = 'tpope/vim-surround'

# 括弧の補完
[[plugins]]
repo = 'jiangmiao/auto-pairs'

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
if has('mac')
nnoremap <silent><C-e> :NERDTreeToggle<CR>
tnoremap <silent><C-e> <C-w>:NERDTreeToggle<CR>
endif
'''
[[plugins]]
repo='ryanoasis/vim-devicons'
hook_add = '''
if !has('mac')
  let g:webdevicons_enable_nerdtree = 0
else
  let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols = {}
  let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['vue'] = ''
  " アイコン入力方法 : `[Ctrl+V]` > `[u]` > `e905`
  let g:NERDTreeExtensionHighlightColor = {}
  let g:NERDTreeExtensionHighlightColor['vue'] = '42B983'
endif
'''

[[plugins]]
repo = 'vim-jp/vimdoc-ja'
hook_add='''
set helplang=ja,en
'''

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
hook_add='''
if empty(globpath(&rtp, 'autoload/lsp.vim'))
    finish
endif
function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    setlocal signcolumn=yes
    nmap <buffer> gd <plug>(lsp-definition)
    nmap <buffer> <f2> <plug>(lsp-rename)
    inoremap <expr> <cr> pumvisible() ? "\<c-y>\<cr>" : "\<cr>"
endfunction
augroup lsp_install
    au!
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END
command! LspDebug let lsp_log_verbose=1 | let lsp_log_file = expand('~/lsp.log')
let g:lsp_diagnostics_enabled = 1
let g:lsp_diagnostics_echo_cursor = 1
let g:asyncomplete_auto_popup = 1
let g:asyncomplete_auto_completeopt = 1
let g:asyncomplete_popup_delay = 200
let g:lsp_text_edit_enabled = 1
'''
[[plugins]]
repo = 'mattn/vim-lsp-settings'
[[plugins]]
repo = 'prabirshrestha/async.vim'
[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'
[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'
[[plugins]]
repo = 'mattn/vim-lsp-icons'
[[plugins]]
repo = 'hrsh7th/vim-vsnip'
[[plugins]]
repo = 'hrsh7th/vim-vsnip-integ'

[[plugins]]
repo = 'joshdick/onedark.vim'
hook_add='''
colorscheme onedark
'''

[[plugins]]
repo = 'easymotion/vim-easymotion'
hook_add = '''
map <Leader> <Plug>(easymotion-prefix)
let g:EasyMotion_do_mapping = 0 " Disable default mappings

" Jump to anywhere you want with minimal keystrokes, with just one key binding.
" `s{char}{label}`
" nmap s <Plug>(easymotion-overwin-f)
" or
" `s{char}{char}{label}`
" Need one more keystroke, but on average, it may be more comfortable.
nmap s <Plug>(easymotion-overwin-f2)

" Turn on case insensitive feature
let g:EasyMotion_smartcase = 1

" JK motions: Line motions
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)
'''

[[plugins]]
repo = 'itchyny/vim-parenmatch'
hook_add = '''
let g:loaded_matchparen = 1
'''

[[plugins]]
repo = 'itchyny/vim-cursorword'

[[plugins]]
repo = 'luochen1990/rainbow'

[[plugins]]
repo = 'lambdalisue/glyph-palette.vim'
hook_add = '''
    augroup my-glyph-palette
    autocmd! *
    autocmd FileType fern call glyph_palette#apply()
    autocmd FileType nerdtree,startify call glyph_palette#apply()
    augroup END
'''
