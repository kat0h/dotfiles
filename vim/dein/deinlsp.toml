[[plugins]]
repo = 'prabirshrestha/vim-lsp'
depends = ['vim-lsp-settings']
on_event = 'InsertEnter'
hook_add = '''
function s:change_ts_ls() abort
  if finddir('node_modules', expand('%:p:h') . ';') ==# ''
    if exists('g:lsp_settings_filetype_typescript') &&
          \(g:lsp_settings_filetype_typescript->index('typescript-language-server') != -1)
      call timerstart(100, {-> (execute("LspStopServer typescript-language-server"))})
    endif
    let g:lsp_settings_filetype_typescript = ['deno']
  else
    if exists('g:lsp_settings_filetype_typescript') &&
          \(g:lsp_settings_filetype_typescript->index('deno') != -1)
      call timerstart(100, {-> (execute("LspStopServer deno"))})
    endif
    let g:lsp_settings_filetype_typescript = ['typescript-language-server']
  endif
endfunction

augroup VimrcLspFt
  autocmd!
  autocmd BufReadPre *.js,*.ts,*.jsx,*.tsx :call s:change_ts_ls()
augroup END
function! s:on_lsp_buffer_enabled() abort
  setlocal omnifunc=lsp#complete
  " setlocal signcolumn=yes
  nmap <buffer> gd <plug>(lsp-definition)
  nmap <buffer> <f2> <plug>(lsp-rename)
endfunction
augroup lsp_install
  au!
  autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END
'''
hook_source = '''
command! LspDebug let lsp_log_verbose=1 | let lsp_log_file = expand('~/lsp.log')
let g:lsp_diagnostics_enabled = 1
let g:lsp_diagnostics_echo_cursor = 1
let g:asyncomplete_auto_popup = 1
let g:asyncomplete_popup_delay = 200
let g:lsp_text_edit_enabled = 1
'''

[[plugins]]
repo = 'mattn/vim-lsp-settings'

[[plugins]]
repo = 'hrsh7th/vim-vsnip'
on_source = 'vim-lsp'

[[plugins]]
on_source = 'vim-lsp'
repo = 'hrsh7th/vim-vsnip-integ'
